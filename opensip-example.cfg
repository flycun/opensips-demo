#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      https://opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########

/* uncomment the following lines to enable debugging */
#debug_mode=yes
# 设置日志级别（Set log level）：它是一个-3 到 4 之间的一个数。默认为 3。 数越大， 那么写道日志中的信息就越多
log_level=3
xlog_level=3
# 如果被设为 yes，服务器将打印调试信息到标准错误输出。如果设为no,syslog 会被使用 （/etc/rsyslog.conf ）
log_stderror=no
log_facility=LOG_LOCAL0

#核心参数 告诉 OpenSER 每个创建处理接入请求的进程的接口有多少孩子进程。四个进程对于大多数系统来说都是很好的一个出发点。这个参数只适用于 UDP 接口，对于 TCP 没有影响
udp_workers=4

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes


socket=udp:192.168.1.14:5060   # CUSTOMIZE ME



####### Modules Section ########
# 设置模块搜索路径。这可以被用来简化模块的加载
#set module path
mpath="/usr/lib/x86_64-linux-gnu/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### MYSQL module
loadmodule "db_mysql.so"

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
modparam("usrloc", "working_mode_preset", "single-instance-sql-write-back")
modparam("usrloc", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips") # CUSTOMIZE ME

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure to enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)
modparam("acc", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips") # CUSTOMIZE ME

#### AUTHentication modules
loadmodule "auth.so"
loadmodule "auth_db.so"
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips") # CUSTOMIZE ME
modparam("auth_db", "load_credentials", "")

#### ALIAS module
loadmodule "alias_db.so"
modparam("alias_db", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips") # CUSTOMIZE ME

#### DIALOG module
loadmodule "dialog.so"
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "default_timeout", 21600)  # 6 hours timeout
modparam("dialog", "db_mode", 2)
modparam("dialog", "db_url",
	"mysql://opensips:opensipsrw@localhost/opensips") # CUSTOMIZE ME

loadmodule "proto_udp.so"

####### Routing Logic ########

# main request routing logic
# 这是 SIP 请求的路由逻辑的开始
route{
# 当一个请求进入主路由块时，要进行一些检查。
# 首先检查的是前转（forward）的最大次数。为了避免回环（loop），我们使用 mf_process_maxfwd_header()函数来检查包到底传递了多少 SIP 跳（SIPhops）。
# 如果回环（loop）被发现，那么脚本则使用 send_reply()函数发送―483 too many hops 消息。
	if (!mf_process_maxfwd_header(10)) {
		send_reply(483,"Too Many Hops");
		exit;
	}

	if (has_totag()) {

		# handle hop-by-hop ACK (no routing required)
		if ( is_method("ACK") && t_check_trans() ) {
			t_relay();
			exit;
		}

		# loose_route()函数是用来试着看看请求有没有使用 record-route 头域进行路由的。这个函数标识的请求将使用最上面的 record-route 头域的内容进行路由。
		# 
		# sequential request within a dialog should
		# take the path determined by record-routing
		if ( !loose_route() ) {
			# we do record-routing for all our traffic, so we should not
			# receive any sequential requests without Route hdr.
			send_reply(404,"Not here");
			exit;
		}

		# validate the sequential request against dialog
		if ( $DLG_status!=NULL && !validate_dialog() ) {
			xlog("In-Dialog $rm from $si (callid=$ci) is not valid according to dialog\n");
			## exit;
		}

		if (is_method("BYE")) {
			# do accounting even if the transaction fails
			do_accounting("db","failed");
			
		}

		# route it out to whatever destination was set by loose_route()
		# in $du (destination URI).
		route(relay);
		append_hf("P-hint: rr-enforced\r\n");
		exit;
	}

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans())
			t_relay();
		exit;
	}

	# absorb retransmissions, but do not create transaction
	t_check_trans();

	if ( !(is_method("REGISTER")  ) ) {
		
		if (is_myself("$fd")) {
					
			# authenticate if from local subscriber
			# authenticate all initial non-REGISTER request that pretend to be
			# generated by local subscriber (domain from FROM URI is local)
			if (!proxy_authorize("", "subscriber")) {
				append_hf("P-hint: proxy_authorize false\r\n"); 
				proxy_challenge("", "auth");
				exit;
			}
			if ($au!=$fU) {
				send_reply(403,"Forbidden auth ID");
				exit;
			}

			consume_credentials();
			# caller authenticated
			
		} else {
			# if caller is not local, then called number must be local
			
			if (!is_myself("$rd")) {
				send_reply(403,"Relay Forbidden");
				exit;
			}
		}

	}

	# preloaded route checking
	if (loose_route()) {
		xlog("L_ERR",
			"Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			send_reply(403,"Preload Route denied");
		exit;
	}

	# record routing
	# 如果不是 REGISTER 方法， OpenSIPS 将进行 record-route。这条消息告诉SIP 服务器要处在两个 UAC 请求的路径当中。
	# record_route() 函数只是简单的增加了一个新的 record-route 头域。
	if (!is_method("REGISTER|MESSAGE"))
		record_route();

	# account only INVITEs
	if (is_method("INVITE")) {
		
		# create dialog with timeout
		if ( !create_dialog("B") ) {
			send_reply(500,"Internal Server Error");
			exit;
		}
		
		do_accounting("db");
		
	}

	
	if (!is_myself("$rd")) {
		append_hf("P-hint: outbound\r\n"); 
		
		route(relay);
	}

	# requests for my domain
	
	if (is_method("PUBLISH|SUBSCRIBE")) {
		send_reply(503, "Service Unavailable");
		exit;
	}

	if (is_method("REGISTER")) {
		# 如果你的服务器是请求的终点，那么你必须使用 www_authorize 函数。
		# 而当请求的最终目的地不是你的服务器，那么则使用 proxy_authorize 函数，然后你要对请求进行前转，这时，服务器实际上是作为代理在工作
		# www_authorize  和 proxy_authorize  的不同使用之处就在于请求的终点是否是你的服务器（REGISTER）
		# authenticate the REGISTER requests
		if (!www_authorize("", "subscriber")) {
			www_challenge("", "auth");
			exit;
		}

		# 在上面的过程中，第一次传的 REGISTER  包没有被 www_authorize  函数认证。然后， www_challenge 语句被调用。它发送了―401 Unauthorized‖包， 这个包按照摘要认证方法（digest authentication scheme）包含了认证请求。 
		# UAC 第二次传的 REGISTER 包添加了 Authorize 头域，然后， save（ocation 函数被调用用来保存 AOR 到 MySQL 的位置表。
		
		if ($au!=$tU) {
			send_reply(403,"Forbidden auth ID");
			exit;
		}

		# 如果是 REGISTER 请求，使用 save(―locatio)将 AOR 保存至位置表（location table）中。理解两个概念至关重要。
		# store the registration and generate a SIP reply
		if (!save("location"))
			xlog("failed to register AoR $tu\n");

		exit;
	}

	if ($rU==NULL) {
		# request with no Username in RURI
		send_reply(484,"Address Incomplete");
		exit;
	}

	
	# apply DB based aliases
	alias_db_lookup("dbaliases");

	

	 


    # lookup(―locatio)函数将试着恢复 R-URI 的 AOR。如果没有找到，我们只是简单的发回错误消息―404 Not Found ,如果 AOR 被定位到（UA 注册了） 那么 UA 的 ip 地址将替代 R－URI。
	# do lookup with method filtering
	if (!lookup("location","m")) {
		if (!db_does_uri_exist("$ru","subscriber")) {
			send_reply(420,"Bad Extension");
			exit;
		}
		
		t_reply(404, "Not Found");
		exit;
	} 
	append_hf("P-hint: usrloc applied\r\n");

	

	# when routing via usrloc, log the missed calls also
	do_accounting("db","missed");
	
	route(relay);
}


route[relay] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		
		

		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	}

	

	if (!t_relay()) {
		send_reply(500,"Internal Error");
	}
	# t_relay()函数前转基于请求 URI 的有状态的请求。域部分将使用 NAPTR，SRV 和 A records 等来进行解析。
	# 这个函数是由TRANSACTION 模块（tm.so）提供的， 负责发送请求并处理重发和响应。如果 请求不能被成功的被发送到目的地， 错误信息将由 t_relay()函数自动产生。如果错误产生， send_reply()将发送响应信息给 UA。
	
	exit;
}




branch_route[per_branch_ops] {
	xlog("new branch at $ru\n");
}


onreply_route[handle_nat] {
	
	xlog("incoming reply\n");
}


failure_route[missed_call] {
	if (t_was_cancelled()) {
		exit;
	}

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply(404,"Not found");
	##	exit;
	##}

	
}



local_route {
	if (is_method("BYE") && $DLG_dir=="UPSTREAM") {
		
		acc_db_request("200 Dialog Timeout", "acc");
		
	}
}
